pipeline {
    agent {
        dockerfile {
            filename 'utils/holly/Dockerfile'
        }
    }

    stages {
        stage('Prepare Build Stages') {
            steps {
                script {
                    configurations = [
                        [printer: "mini", build_type: "release", bootloader: "no"],
                        [printer: "mini", build_type: "release", bootloader: "empty"],
                    ]
                    configurations.each { config ->
                        stage("Build - ${config.printer},${config.build_type},${config.bootloader}boot") {
                            sh "python utils/build.py --printer ${config.printer} --build-type ${config.build_type} --bootloader ${config.bootloader} --generate-bbf --no-store-output"
                        }
                    }
                }
            }
        }

        stage('Check Formatting') {
            when {
                expression { env.CHANGE_TARGET }
            }
            steps {
                sh "pip install pre-commit"
                sh "pre-commit install"
                sh """pre-commit run \
                    --source remotes/origin/${env.CHANGE_TARGET} \
                    --origin HEAD \
                    --show-diff-on-failure \
                    --hook-stage manual
                """
            }
        }
    }

    post {
        always {
            // decide what prefix to use for build products
            script {
                if (env.CHANGE_ID) {
                    prefix = "pr_${env.CHANGE_ID}_"
                } else {
                    prefix = "branch_${env.BRANCH_NAME}_"
                }
            }
            // add prefix to build products
            sh "PREFIX=${prefix} ; " + '''
                cd build/products
                for f in * ; do
                    mv -- "$f" "${PREFIX}$f";
                done
            '''
            // archive build products
            archiveArtifacts artifacts: 'build/products/*', fingerprint: true
        }
        cleanup {
            deleteDir()
        }
    }
}
